\documentclass{article}
\begin{document}
\noindent Paul Garaud \\
Assignment 2 Problem Set 1 \\

\begin{enumerate}
  \item Show that $A^TA \ne AA^T$ \\\\
  Suppose $A$ is $m \times n$ where $m \ne n$. It follows that $A^T$ is $n \times m$.
  Since $A^TA$ is $n \times n$ and $AA^T$ is $m \times m$, these two matrices cannot
  be equal.
  \item Under what conditions is $A^TA \ne AA^T$ true? \\\\
  If $A$ is symmetric, that is $A = A^T$, then $A^TA = AA = AA^T$ is satisfied.
\end{enumerate}

Assignment 2 Problem Set 2 \\

<<echo = TRUE, eval = TRUE>>=

# find indices of rows to swap (if any)
swap.row <- function(A) {
  swap <- 0
  for (i in 1:dim(A)[2]) {
    row.to.swap <- which(A[i:dim(A)[1], i] != 0)[1] + i - 1
    if (row.to.swap != i) {
      swap <- c(i, row.to.swap)
      break
    }
  }
  return(swap)
}

# get element indices for pivot (assumes rows are properly ordered)
get.pivot <- function(A) {
  B <- A != 0
  pivot <- 0
  # loop through columns
  for (i in 1:ncol(B)) {
    non.zeros <- which(B[, i])
    # check indices in column i with zeros
    if (sum(non.zeros > i) == 0) {
      next
    } else {
      indices <- which(B[, i])
      pivot <- c(indices[indices > i][1], i)
      break
    }
  }
  return(pivot)  
}

get.E <- function(U) {
  
  # check args are valid
  stopifnot(class(U) == 'matrix' && nrow(U) == ncol(U))
  
  # build E matrix
  E <- P <- I <- diag(nrow(U))
  
  # swap rows
  swap <- swap.row(U)
  
  if (length(swap) > 1) {
    if (length(swap) > 1) {
      P[swap[1], ] <- I[swap[2], ]
      P[swap[2], ] <- I[swap[1], ]
    }
  } else {  
    # multiplication & addition
    piv <- get.pivot(U)
    E[piv[1], piv[2]] <- -U[piv[1], piv[2]]
    E[piv[1], piv[1]] <- U[piv[2], piv[2]]
  }
  
  return(E %*% P)
}

# get inverse of E matrix (ignores permutation)
invert.E <- function(E) {
  if (all(E %*% E == diag(nrow(E)))) {
    return(E)
  }
  E <- E * -1
  for (i in 1:nrow(E)) {
    E[i, i]  <- 1
  }
  return(E)
}

# test that above functions work correctly
get.U<- function(A) {
  piv <- get.pivot(A)
  U <- A
  while (length(piv) > 1) {
    E <- get.E(U)
    U <- E %*% U
    piv <- get.pivot(U)
  }
  return(U)
}


# LU decomposition
get.L <- function(A) {
  U <- A
  L <- diag(nrow(A))
  piv <- get.pivot(A)
  swap <- swap.row(A)
  
  # change U and L as we go
  while (length(piv) > 1) {
    E <- get.E(U)
    L <- L %*% invert.E(E)
    U <- E %*% U
    piv <- get.pivot(U)
    swap <- swap.row(U)
  }
  
  return(L)
}

(A <- matrix(c(0, -1, 3, 8, 2, 0, 1, 1, 1), byrow=TRUE, nrow=3))
get.L(A) %*% get.U(A)

# note that while L %*% U has differing values in the last row,
# the two matrices are equivalent since all values in the last
# row are the same scalar multiple (ie, 8); dividing through by
# 8 yields A.
@

\end{document}